// ============================================
// USAGE EXAMPLES
// ============================================

// 1. Using the auth context in any component
// ============================================
import { useAuth } from '@/src/contexts/AuthContext';

function ProfileScreen() {
  const { user, isAuthenticated, logout } = useAuth();

  const handleLogout = async () => {
    try {
      await logout();
      // User will be automatically redirected by AuthGuard
    } catch (error) {
      console.error('Logout failed:', error);
    }
  };

  if (!isAuthenticated) {
    return <Text>Please log in</Text>;
  }

  return (
    <View>
      <Text>Welcome, {user?.name}!</Text>
      <Text>Email: {user?.email}</Text>
      <Button title="Logout" onPress={handleLogout} />
    </View>
  );
}

// 2. Using HOC to protect a route
// ============================================
import { withProtectedRoute } from '@/src/hoc/withAuth';

function DashboardScreen() {
  return (
    <View>
      <Text>This is a protected dashboard</Text>
    </View>
  );
}

export default withProtectedRoute(DashboardScreen);

// 3. Using HOC for public routes (auth screens)
// ============================================
import { withPublicRoute } from '@/src/hoc/withAuth';

function LoginScreen() {
  return (
    <View>
      <Text>Login Page</Text>
    </View>
  );
}

export default withPublicRoute(LoginScreen);

// 4. Manual token refresh
// ============================================
import { useAuth } from '@/src/contexts/AuthContext';

function SomeComponent() {
  const { refreshAuth, login } = useAuth();

  const handleRefresh = async () => {
    try {
      await refreshAuth();
      console.log('Token refreshed successfully');
    } catch (error) {
      console.error('Refresh failed:', error);
    }
  };

  const handleManualLogin = async (token: string) => {
    try {
      await login(token);
      console.log('Login successful');
    } catch (error) {
      console.error('Login failed:', error);
    }
  };

  return (
    <View>
      <Button title="Refresh Token" onPress={handleRefresh} />
    </View>
  );
}

// 5. Using with AuthGuard in root layout (RECOMMENDED)
// ============================================
// app/_layout.tsx
import { AuthGuard } from '@/src/components/AuthGuard';

export default function RootLayout() {
  return (
    <QueryClientProvider client={queryClient}>
      <ThemeProvider value={colorScheme === 'dark' ? DarkTheme : DefaultTheme}>
        <AuthProvider>
          <AuthGuard>
            <Stack screenOptions={{ headerShown: false }}>
              <Stack.Screen name="(tabs)" />
              <Stack.Screen name="(auth)/index" />
              <Stack.Screen name="(auth)/callback" />
            </Stack>
          </AuthGuard>
        </AuthProvider>
      </ThemeProvider>
    </QueryClientProvider>
  );
}

// 6. Checking loading states
// ============================================
function MyComponent() {
  const { isLoading, user, error } = useAuth();

  if (isLoading) {
    return <ActivityIndicator />;
  }

  if (error) {
    return <Text>Error: {error.message}</Text>;
  }

  return <Text>Hello {user?.name}</Text>;
}

// 7. Using TanStack Query hooks directly (advanced)
// ============================================
import { useUser, useLogout } from '@/src/hooks/queries/auth.queries';

function AdvancedComponent() {
  const { data: user, isLoading, error, refetch } = useUser();
  const logoutMutation = useLogout();

  const handleLogout = () => {
    logoutMutation.mutate();
  };

  return (
    <View>
      {isLoading && <ActivityIndicator />}
      {error && <Text>Error loading user</Text>}
      {user && <Text>Welcome {user.name}</Text>}
      <Button title="Logout" onPress={handleLogout} />
      <Button title="Refresh User" onPress={() => refetch()} />
    </View>
  );
}

// 8. Auth status check without context
// ============================================
import { useAuthStatus } from '@/src/hooks/queries/auth.queries';

function StatusComponent() {
  const { data: isAuthenticated, isLoading } = useAuthStatus();

  if (isLoading) return <ActivityIndicator />;

  return (
    <Text>
      Status: {isAuthenticated ? 'Authenticated' : 'Not Authenticated'}
    </Text>
  );
}